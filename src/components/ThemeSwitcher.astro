---
import { boolean } from "astro/zod";
const { themes = ['auto', 'light', 'dark', 'dim'], checked = true } = Astro.props;
---

<form id="theme-switcher">
  <div>
    <input checked type="radio" id={themes[0]} name="theme" value="auto">
    <label for={themes[0]}>{themes[0]}</label>
  </div>

  
  {themes.map((theme: string, index: number) => 
    (index > 0 &&
    <div>
      <input type="radio" id={theme} name="theme" value={theme}>
      <label for={theme}>{theme}</label>
    </div>
    )
  )}
</form>

<!-- <fieldset
class="theme-switcher | flex-group | mx-auto | margin-block-start-10 | clr-accent-100"
>
<legend class="theme-switcher__legend">Theme:</legend>

<div class="theme-switcher__options | flex-group">

{themes.map((theme: string) => 
  <div class="theme-switcher__option-group">
    <input
      id={theme}
      class="theme-switcher__input"
      name="theme"
      type="radio"
    />
    <label for={theme} class="theme-switcher__label | clr-accent-100">{theme}</label>
  </div>
)}
</div>
</fieldset> -->

<!-- * Script * -->
<script define:vars={{ themes }}>

const body = document.body;
const themeSwitcher = document.querySelector('#theme-switcher');
let activeTheme = localStorage.getItem('theme');

const doc = document.firstElementChild;

// Function to set theme and save in local storage
function setTheme(themeToSet) {
  // Checks if theme exist
  if (!themes.includes(themeToSet)) return;

  if (themeToSet === "auto") {
    window.localStorage.removeItem("theme");
    doc.removeAttribute("color-scheme");
  } else {
    window.localStorage.setItem("theme", themeToSet);
    doc.setAttribute('color-scheme', themeToSet);
  }
}

// Switcher event listener
themeSwitcher.addEventListener('click', function (e) {
  if (e.target.tagName != 'INPUT') {
    return;
  }

  const themeToSet = e.target.id;
  console.log(themeToSet);
  setTheme(themeToSet);
});

// Set theme on loading
(function loadTheme() {
  const theme = window.localStorage.getItem('theme');
  setTheme(theme);
  document.getElementById(theme).checked = true;
})
();

// Var #1
// Function to set theme
// function setTheme(themeToSet) {
//   // Checks if theme exist
//   console.log(themeToSet);
//   if (!themes.includes(themeToSet)) return;

//   if (themeToSet === "system") {
//     window.localStorage.removeItem("theme");
//     body.removeAttribute("data-theme");
//   } else {
//     window.localStorage.setItem("theme", themeToSet);
//     body.setAttribute("data-theme", themeToSet);
//   }
// }
  // themes.forEach((theme) => {
  //   if (theme !== themeToSet && body.hasAttribute(theme))
  //     body.removeAttribute(theme);
  // });

  // if (!body.hasAttribute(themeToSet)) {
  //   body.setAttribute('data-theme', themeToSet);
  // }


// Clicking on the theme switcher
// themeSwitcher.addEventListener('click', function (e) {
//   if (e.target.tagName != 'INPUT') {
//     return;
//   }

//   const themeToSet = e.target.id;
//   setTheme(themeToSet);
// });

// Set theme on loading
// (function loadTheme() {
//   const theme = window.localStorage.getItem('theme');
//   setTheme(theme);
//   document.getElementById(theme).checked = true;
// })
// ();

// Var #2
// function changeTheme(theme) {

//   if (!themes.includes(theme)) return;

//   body.classList.add("theme-switch");

//   if (theme === "system") {
//     localStorage.removeItem("theme");
//     body.removeAttribute("data-theme");
//   } else {
//     localStorage.setItem("theme", theme);
//     body.setAttribute("data-theme", theme);
//   }

//   body.addEventListener("transitionend", function() {
//       body.classList.remove("theme-switch");
//     }, {}
//   );
// }

// themeSwitcher.addEventListener("click", (e) => {
//   if (e.target.tagName != "INPUT") {
//     return;
//   }

//   const themeToActivate = e.target.id;
//   changeTheme(themeToActivate);
// });

// window.onload = () => {
//   // document.getElementById('system').checked = true;

//   if (activeTheme) {
//     document.getElementById(activeTheme).checked = true;
//     changeTheme(activeTheme);
//   }
// };

// Var #3
// function calculateSettingAsThemeString({ localStorageTheme, systemSettingDark }) {
//   if (localStorageTheme !== null) {
//     return localStorageTheme;
//   }

//   if (systemSettingDark.matches) {
//     return "dark";
//   }

//   return "light";
// }

// const localStorageTheme = localStorage.getItem("theme");
// const systemSettingDark = window.matchMedia("(prefers-color-scheme: dark)");

// let currentThemeSetting = calculateSettingAsThemeString({ localStorageTheme, systemSettingDark });

// themeSwitcher.addEventListener("click", (e) => {
//   if (e.target.tagName != "INPUT") {
//     return;
//   }
  
//   console.log(currentThemeSetting);
//   const newTheme = currentThemeSetting === "dark" ? "light" : "dark";
//   body.setAttribute("data-theme", newTheme);
//   localStorage.setItem("theme", newTheme);

//   currentThemeSetting = newTheme;


//   // const themeToActivate = e.target.id;
//   // changeTheme(themeToActivate);
// });



</script>
