---
const { themes = ['auto', 'light', 'dark', 'dim'], checked = true } = Astro.props;
---

<form id="theme-switcher">
  <div>
    <input checked type="radio" id={themes[0]} name="theme" value="auto">
    <label for={themes[0]}>{themes[0]}</label>
  </div>

  {
    themes.map((theme: string, index: number) => (
    index > 0 &&
    <div>
      <input type="radio" id={theme} name="theme" value={theme}/>
      <label for={theme}>{theme}</label>
    </div>
    ))
  }
</form>

<!-- Style -->
<style lang='scss'>

:root {
  &[color-scheme='light'] {
    color-scheme: light;

    --accent: var(--accent-light);

    /* Surface colors */
    --surface-1: var(--surface-1-light);
    --surface-2: var(--surface-2-light);
    --surface-3: var(--surface-3-light);
    --surface-4: var(--surface-4-light);

   /* Error colors */
    --error-1: var(--error-1-light);
    --error-2: var(--error-2-light);

    /* Text color */
    --text-1: var(--text-1-light);
    --text-2: var(--text-2-light);

    /* Link colors */
    --link: var(--link-light);
    --link-hover: var(--link-hover-light);
    --link-visited: var(--link-visited-light);

    /* Shadow */
    --shadow-color: var(--shadow-color-light);
    --shadow-strength: var(--shadow-strength-light);

    --highlight-color: hsl(0 0% 0% / 20%);

    /* Scroll color */
    --scroll-thumb-color: var(--scroll-thumb-light);
  }

  &[color-scheme='dark'] {
    color-scheme: dark;

    --accent: var(--accent-dark);

    /* Surface colors */
    --surface-1: var(--surface-1-dark);
    --surface-2: var(--surface-2-dark);
    --surface-3: var(--surface-3-dark);
    --surface-4: var(--surface-4-dark);

    /* Error colors */
    --error-1: var(--error-1-dark);
    --error-2: var(--error-2-dark);

    /* Text color */
    --text-1: var(--text-1-dark);
    --text-2: var(--text-2-dark);

    /* Link colors */
    --link: var(--link-dark);
    --link-hover: var(--link-hover-dark);
    --link-visited: var(--link-visited-dark);

    /* Shadow */
    --shadow-color: var(--shadow-color-dark);
    --shadow-strength: var(--shadow-strength-dark);

    /* Scroll color */
    --scroll-thumb-color: var(--scroll-thumb-dark);
  }

  &[color-scheme='dim'] {
    color-scheme: dark;

    --accent: var(--accent-dim);

    /* Surface colors */
    --surface-1: var(--surface-1-dim);
    --surface-2: var(--surface-2-dim);
    --surface-3: var(--surface-3-dim);
    --surface-4: var(--surface-4-dim);

    /* Error colors */
    --error-1: var(--error-1-dim);
    --error-2: var(--error-2-dim);

    /* Text color */
    --text-1: var(--text-1-dim);
    --text-2: var(--text-2-dim);

    /* Link colors */
    --link: var(--link-dim);
    --link-hover: var(--link-hover-dim);
    --link-visited: var(--link-visited-dim);
    
    /* Shadow */
    --shadow-color: var(--shadow-color-dim);
    --shadow-strength: var(--shadow-strength-dim);
  
    /* Scroll color */
    --scroll-thumb-color: var(--scroll-thumb-dim);
  }
}
</style>

<!-- Script -->
<script define:vars={{ themes }}>

const themeSwitcher = document.querySelector('#theme-switcher');
let activeTheme = window.localStorage.getItem('theme');

const doc = document.firstElementChild;

// Function to set theme and save in local storage
function setTheme(themeToSet) {
  // Checks if theme exist
  if (!themes.includes(themeToSet)) return;

  if (themeToSet === 'auto') {
    window.localStorage.removeItem('theme');
    doc.removeAttribute('color-scheme');
  } else {
    window.localStorage.setItem('theme', themeToSet);
    doc.setAttribute('color-scheme', themeToSet);
  }

  document.getElementById(themeToSet).setAttribute('checked', true);
}

// Switcher event listener
themeSwitcher.addEventListener('click', function (e) {
  if (e.target.tagName != 'INPUT') {
    return;
  }

  const themeToSet = e.target.id;
  console.log(themeToSet);
  setTheme(themeToSet);
});

// Set theme on loading
(function loadTheme() {
  const theme = activeTheme;
  setTheme(theme);
})();
</script>