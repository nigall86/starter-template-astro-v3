---
import Button from './Button.astro';

export interface Props {
  type: string,
  title?: string;
  text?: string; 
}

const { 
  type = 'megaDialog',
  title = 'Dialog heading',
  text = 'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Unde facere possimus sapiente. Fugiat nam facere perspiciatis distinctio iste aliquam impedit!',
   } = Astro.props as Props;
---

<dialog id={type} data-type={type}>
  <form method="dialog">
    <!-- Condition for header -->
    {type === 'megaDialog' ? 
    <header>
      <h3>{title}</h3>
      <Button 
        type="btn-close"
        onClick='this.closest('dialog').close('close')'
        kind = 'button' />
    </header>:
    <></>}
    
    <article>
      {text}
    </article>
    <footer>
      <menu>
        <Button
          type="primary"
          autofocus
          onClick='this.closest('dialog').close('cancel')'
          btnType="cancel"
          kind = 'button' >
          Cancel
       </Button>
        <Button
          btnType="submit"
          value='confirm'
          kind = 'button' >
          Confirm
        </Button>
      </menu>
    </footer>
  </form>
</dialog>

<Button
  type="file"
  onClick={`${type}.showModal()`}
  kind='button'>
  Open Dialog
</Button>


<!-- * Style * -->
<style lang="scss">
@use '../sass/abstracts/' as *;

  // Disabling scrolling while open
  html:has(dialog[open][data-type="megaDialog"]) {
    overflow: hidden;
  }

  dialog {
    z-index: 100;
    position: fixed;
    inset: 0;

    display: grid;
    margin: auto;
    padding: 0;

    // max-inline-size: min(90vw, var(--dialog-max-inline-size, $dialog-max-inline-size));
    max-block-size: min(80vh, 100%);
    max-block-size: min(80dvb, 100%); // dvb --> dynamic viewport block size
    
    border-radius: var(--radius-3);
    // background-color: $dialog-background-default;
    // color: $dialog-color-default;

    box-shadow: var(--shadow-6);
    overflow: hidden;

    // Overall backdrop transition
    &::backdrop {
      transition: backdrop-filter .5s ease;
    }

    @media (--md-n-below) {
      &[data-type="megaDialog"] {
        margin-block-end: 0;
        border-end-end-radius: 0;
        border-end-start-radius: 0;
      }
    }

    // Hidden state
    &:not([open]) {
      pointer-events: none;
      opacity: 0;
    }

    // Backdrop styling
    &[data-type="megaDialog"]::backdrop {
      backdrop-filter: blur(25px);
    }

    & > form {
      display: grid;
      grid-template-rows: auto 1fr auto;
      align-items: start;
      max-block-size: 80vh;
      max-block-size: 80dvb;

      & > header {
        display: flex;
        gap: var(--size-3);
        justify-content: space-between;
        align-items: flex-start;
        background: $color-primary-200;
        padding-block: var(--size-3);
        padding-inline: var(--size-5);
      }
    }
  }
</style>